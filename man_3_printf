.\" Man Page for _printf().
.TH man 3 "26 June 2023" "1.0" "_printf man page"
.SH NAME
.B _printf()
- Formatted output conversion.
.SH SYNOPSIS
.B #include "main.h"

.B int _printf(const char *
.I format
.B , ...)
.SH DESCRIPTION
.B _printf()
Produces output according to
.I format

(writes output to stdout, the standard output stream)
.SH RETURN VALUE
The number of characters printed (excluding the null byte used to end output to strings).

Else (-1) if an error is encountered.
.SH Format of the format string
The format string is a character string. The format string is composed of zero 
or more directives: ordinary characters (not %), which are copied unchanged to 
the output stream; and conversion specifications, each of which results in 
fetching zero or more subsequent arguments.  Each conversion specification is 
introduced by the character %, and ends with a conversion specifier.
.SH Conversion Specifiers
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:
.TP
.B c
the int argument is converted to an unsigned char, and the resulting character 
is written.
.TP
.B s
The const char * argument is expected to be a pointer to an array of character 
type (pointer to a string). Characters from the array are written up to 
(but not including) a terminating null byte ('\0').
.TP
.B d, i
The int argument is converted to signed decimal notation.
.TP
.B %
A '%' is written.  No argument is converted.  The complete conversion 
specification is '%%'.
.SH EXAMPLE
To print a character, string, and integers:

#include "main.h"

int main(void)
{
	int len;
	len = _printf("Let's try to printf a simple sentence.\n");

	_printf("Character:[%c]\n", 'H');
	_printf("String:[%s]\n", "I am a string !");
	_printf("Length:[%d, %i]\n", len, len);
	_printf("Negative:[%d]\n", -762534);

	return (0);
}
.SH SEE ALSO
.I printf(3)
.SH BUGS
No known bugs
.SH AUTHOR
Samir Idris, Adebayo Abubakar
